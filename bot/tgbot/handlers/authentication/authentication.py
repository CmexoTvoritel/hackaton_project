from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from tgbot.services.repository import Repo
from tgbot.states.authentication import AuthenticationState
from validate_email import validate_email


async def authentication_start(msg: types.Message):
    text = "üîπ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é sfedu-–ø–æ—á—Ç—É..."
    #
    await msg.answer(text=text)
    await AuthenticationState.waiting_for_email.set()


async def email_writen(msg: types.Message, state: FSMContext):
    if (validate_email(msg.text) == False) or (msg.text[-9:] != "@sfedu.ru"):
        await msg.answer(text="üîª –í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—É—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É sfedu...")
        return
    await state.update_data(email=msg.text)
    text = "üîπ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è..."
    #
    await msg.answer(text=text)
    await AuthenticationState.next()


async def name_writen(msg: types.Message, state: FSMContext):
    if len(msg.text) > 60:
        await msg.answer(text="üîª –î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 60 —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑...")
        return
    await state.update_data(name=msg.text)
    text = "üîπ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é..."
    #
    await msg.answer(text=text)
    await AuthenticationState.next()


async def surname_writen(msg: types.Message, state: FSMContext):
    if len(msg.text) > 60:
        # TODO
        return
    await state.update_data(surname=msg.text)
    text = "üîπ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –æ—Ç—á–µ—Å—Ç–≤–æ..."
    #
    await msg.answer(text=text)
    await AuthenticationState.next()


async def patronymic_writen(msg: types.Message, state: FSMContext):
    if len(msg.text) > 60:
        # TODO
        return
    await state.update_data(patronymic=msg.text)
    text = "üîπ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É..."
    #
    await msg.answer(text=text)
    await AuthenticationState.next()


async def group_name_writen(msg: types.Message, repo: Repo, state: FSMContext):
    if len(msg.text) > 7:
        # TODO
        return
    await state.update_data(group_name=msg.text)
    #
    user_data = await state.get_data()
    email = user_data["email"]
    name = user_data["name"]
    surname = user_data["surname"]
    patronymic = user_data["patronymic"]
    group_name = msg.text
    #
    text = f"üîπ <b>–í–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n<b>–ü–æ—á—Ç–∞:</b> {email}\n<b>–§–ò–û:</b> {surname} {name} {patronymic}\n<b>–ì—Ä—É–ø–ø–∞:</b> {group_name}"
    kb = types.InlineKeyboardMarkup()
    confirm_btn = types.InlineKeyboardButton(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
        callback_data="confirm_user_data"
    )
    kb.add(confirm_btn)
    re_enter_btn = types.InlineKeyboardButton(
        text="üîÅ –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≥–æ",
        callback_data="re_enter_user_data"
    )
    kb.add(re_enter_btn)
    await msg.answer(
        text=text,
        reply_markup=kb
    )
    await AuthenticationState.next()


async def user_data_confirmed(call: types.CallbackQuery, repo: Repo, state: FSMContext):
    user_data = await state.get_data()
    tg_id = call.from_user.id
    email = user_data["email"]
    name = user_data["name"]
    surname = user_data["surname"]
    patronymic = user_data["patronymic"]
    group_name = user_data["group_name"]
    await repo.authenticate_user(tg_id, email, name, surname, patronymic, group_name)
    #
    await call.message.edit_text(text=call.message.text + "\n\n‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    await call.answer()
    await state.finish()


async def re_enter_user_data(call: types.CallbackQuery):
    await authentication_start(call.message)
    await call.answer()


def register_handlers_authentication(dp: Dispatcher):
    dp.register_message_handler(
        email_writen, state=AuthenticationState.waiting_for_email)
    dp.register_message_handler(
        name_writen, state=AuthenticationState.waiting_for_name)
    dp.register_message_handler(
        surname_writen, state=AuthenticationState.waiting_for_surname)
    dp.register_message_handler(
        patronymic_writen, state=AuthenticationState.waiting_for_patronymic)
    dp.register_message_handler(
        group_name_writen, state=AuthenticationState.waiting_for_group_name)
    dp.register_callback_query_handler(
        user_data_confirmed,
        text="confirm_user_data",
        state=AuthenticationState.waiting_for_confirmation
    )
    dp.register_callback_query_handler(
        re_enter_user_data,
        text="re_enter_user_data",
        state=AuthenticationState.waiting_for_confirmation
    )
